;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name cljs-pdfkit.core, :imports nil, :requires {optimize-dom cljs-pdfkit.optimize-dom, cljs-pdfkit.optimize-dom cljs-pdfkit.optimize-dom, util cljs-pdfkit.util, cljs-pdfkit.util cljs-pdfkit.util}, :uses nil, :defs {handle-tag {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 78, :column 7, :end-line 78, :end-column 17, :arglists (quote ([doc stack [tag tag-opts & children :as v]]))}, :name cljs-pdfkit.core/handle-tag, :variadic false, :file "out/cljs_pdfkit/core.cljs", :end-column 17, :method-params ([doc stack p__4806]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 3, :fn-var true, :arglists (quote ([doc stack [tag tag-opts & children :as v]]))}, default-stack {:name cljs-pdfkit.core/default-stack, :file "out/cljs_pdfkit/core.cljs", :line 13, :column 1, :end-line 13, :end-column 19, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 13, :column 6, :end-line 13, :end-column 19}}, make-linear-gradient {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 52, :column 7, :end-line 52, :end-column 27, :arglists (quote ([doc {[x1 y1 x2 y2] :points, stops :stops}]))}, :name cljs-pdfkit.core/make-linear-gradient, :variadic false, :file "out/cljs_pdfkit/core.cljs", :end-column 27, :method-params ([doc p__4711]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([doc {[x1 y1 x2 y2] :points, stops :stops}]))}, PDFDocument {:name cljs-pdfkit.core/PDFDocument, :file "out/cljs_pdfkit/core.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 9, :column 6, :end-line 9, :end-column 17}}, apply-state {:protocol-inline nil, :meta {:arglists (quote ([doc opts])), :file nil}, :name cljs-pdfkit.core/apply-state, :variadic false, :file "out/cljs_pdfkit/core.cljs", :method-params ([doc opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([doc opts]))}, print-through {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 15, :column 7, :end-line 15, :end-column 20, :arglists (quote ([x]))}, :name cljs-pdfkit.core/print-through, :variadic false, :file "out/cljs_pdfkit/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, apply-stack-frame {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 70, :column 7, :end-line 70, :end-column 24, :arglists (quote ([doc {:keys [font font-size]} save?]))}, :name cljs-pdfkit.core/apply-stack-frame, :variadic false, :file "out/cljs_pdfkit/core.cljs", :end-column 24, :method-params ([doc p__4801 save?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 3, :fn-var true, :arglists (quote ([doc {:keys [font font-size]} save?]))}, pdf {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 28, :column 7, :end-line 28, :end-column 10, :arglists (quote ([dom])), :doc "Create a pdf with a vector of the form\n\n  [:pdf opts & pages]\n\n  opts takes the form\n  {:info\n    {:title \"Title of the Document\"\n     :author \"Author\"\n     :subject - \"Subject\"\n     :keywords - \"Keywords\"}\n   :layout \"landscape\"}\n  "}, :name cljs-pdfkit.core/pdf, :variadic false, :file "out/cljs_pdfkit/core.cljs", :end-column 10, :method-params ([dom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dom])), :doc "Create a pdf with a vector of the form\n\n  [:pdf opts & pages]\n\n  opts takes the form\n  {:info\n    {:title \"Title of the Document\"\n     :author \"Author\"\n     :subject - \"Subject\"\n     :keywords - \"Keywords\"}\n   :layout \"landscape\"}\n  "}, page {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 17, :column 7, :end-line 17, :end-column 11, :arglists (quote ([doc page pdf-opts]))}, :name cljs-pdfkit.core/page, :variadic false, :file "out/cljs_pdfkit/core.cljs", :end-column 11, :method-params ([doc page pdf-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([doc page pdf-opts]))}, draw-tag {:name cljs-pdfkit.core/draw-tag, :file "out/cljs_pdfkit/core.cljs", :line 114, :column 1, :end-line 114, :end-column 19, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 114, :column 11, :end-line 114, :end-column 19}}, make-radial-gradient {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/core.cljs", :line 60, :column 7, :end-line 60, :end-column 27, :arglists (quote ([doc {[x1 y1 r1 x2 y2 r2] :points, stops :stops}]))}, :name cljs-pdfkit.core/make-radial-gradient, :variadic false, :file "out/cljs_pdfkit/core.cljs", :end-column 27, :method-params ([doc p__4755]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([doc {[x1 y1 r1 x2 y2 r2] :points, stops :stops}]))}}, :require-macros {core cljs-pdfkit.core, cljs-pdfkit.core cljs-pdfkit.core}, :cljs.analyzer/constants {:seen #{:path :fill-color = :stops :clip :line-join :do :rectAnnotation :font-size :fill-and-stroke :scale :stroke-color :layout :highlight :linear-gradient :default pdf-tag :stroke-opacity :fill :autoFirstPage :circle :dash :pdf :radial-gradient :points :page :move-down :underline :font :note :style :strike :line :miter-limit :bezier-curve :link :line-width :opacity :lineAnnotation :ellipseAnnotation :ellipse :info :translate :rotate :image :textAnnotation :hierarchy :quadratic-curve :line-cap :rect page-tag :rounded-rect :fill-opacity :polygon :text}, :order [:font :font-size :page = page-tag :layout :style :pdf pdf-tag :info :autoFirstPage :points :stops :fill-color :line-join :stroke-color :stroke-opacity :miter-limit :line-width :opacity :line-cap :fill-opacity :linear-gradient :fill-and-stroke :scale :fill :dash :radial-gradient :rotate :translate :clip :do :text :default :hierarchy :note :link :highlight :underline :strike :lineAnnotation :rectAnnotation :ellipseAnnotation :textAnnotation :image :move-down :rect :rounded-rect :ellipse :circle :polygon :path :line :quadratic-curve :bezier-curve]}, :doc nil}