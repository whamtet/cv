;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name cljs-pdfkit.optimize-dom, :imports nil, :requires {set clojure.set, clojure.set clojure.set}, :uses nil, :defs {static-properties {:name cljs-pdfkit.optimize-dom/static-properties, :file "out/cljs_pdfkit/optimize_dom.cljc", :line 77, :column 1, :end-line 77, :end-column 23, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 77, :column 6, :end-line 77, :end-column 23}}, postwalk {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 15, :column 7, :end-line 15, :end-column 15, :arglists (quote ([f m])), :doc "transforms tree by applying f to vector elements"}, :name cljs-pdfkit.optimize-dom/postwalk, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 15, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m])), :doc "transforms tree by applying f to vector elements"}, percolate-up {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 85, :column 7, :end-line 85, :end-column 19, :arglists (quote ([[tag style & children :as v]]))}, :name cljs-pdfkit.optimize-dom/percolate-up, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 19, :method-params ([p__4535]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag style & children :as v]]))}, complete-postwalk {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 22, :column 7, :end-line 22, :end-column 24, :arglists (quote ([f m]))}, :name cljs-pdfkit.optimize-dom/complete-postwalk, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 24, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m]))}, leaf-properties {:name cljs-pdfkit.optimize-dom/leaf-properties, :file "out/cljs_pdfkit/optimize_dom.cljc", :line 67, :column 1, :end-line 67, :end-column 21, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 67, :column 6, :end-line 67, :end-column 21}}, map-intersection {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 60, :column 7, :end-line 60, :end-column 23, :arglists (quote ([maps]))}, :name cljs-pdfkit.optimize-dom/map-intersection, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 23, :method-params ([maps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([maps]))}, refactor-group {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 43, :column 7, :end-line 43, :end-column 21, :arglists (quote ([group])), :doc "insert style ancestor to elements with identical styles"}, :name cljs-pdfkit.optimize-dom/refactor-group, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 21, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group])), :doc "insert style ancestor to elements with identical styles"}, add-style {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 34, :column 7, :end-line 34, :end-column 16, :arglists (quote ([[tag style & children :as v]])), :doc "adds style map if not present\n  enables style elements to propagate up from children"}, :name cljs-pdfkit.optimize-dom/add-style, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 16, :method-params ([p__4528]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag style & children :as v]])), :doc "adds style map if not present\n  enables style elements to propagate up from children"}, map-difference {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 64, :column 7, :end-line 64, :end-column 21, :arglists (quote ([m1 m2]))}, :name cljs-pdfkit.optimize-dom/map-difference, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 21, :method-params ([m1 m2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m1 m2]))}, element-tag? {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 12, :column 7, :end-line 12, :end-column 19, :arglists (quote ([v]))}, :name cljs-pdfkit.optimize-dom/element-tag?, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 19, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, prewalk {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 28, :column 7, :end-line 28, :end-column 14, :arglists (quote ([f m]))}, :name cljs-pdfkit.optimize-dom/prewalk, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 14, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m]))}, unravel-vector {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 9, :column 7, :end-line 9, :end-column 21, :arglists (quote ([v]))}, :name cljs-pdfkit.optimize-dom/unravel-vector, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 21, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, optimize-dom {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 105, :column 7, :end-line 105, :end-column 19, :arglists (quote ([m]))}, :name cljs-pdfkit.optimize-dom/optimize-dom, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 19, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, refactor-tag {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([[tag style & children :as v]])), :doc "inserts style ancestors to reduce stack operations when generating pdf"}, :name cljs-pdfkit.optimize-dom/refactor-tag, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 19, :method-params ([p__4531]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag style & children :as v]])), :doc "inserts style ancestors to reduce stack operations when generating pdf"}, root-properties2 {:name cljs-pdfkit.optimize-dom/root-properties2, :file "out/cljs_pdfkit/optimize_dom.cljc", :line 83, :column 1, :end-line 83, :end-column 22, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 83, :column 6, :end-line 83, :end-column 22}}, percolate-down {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 95, :column 7, :end-line 95, :end-column 21, :arglists (quote ([[tag style & children :as v]]))}, :name cljs-pdfkit.optimize-dom/percolate-down, :variadic false, :file "out/cljs_pdfkit/optimize_dom.cljc", :end-column 21, :method-params ([p__4539]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag style & children :as v]]))}, root-properties {:name cljs-pdfkit.optimize-dom/root-properties, :file "out/cljs_pdfkit/optimize_dom.cljc", :line 79, :column 1, :end-line 79, :end-column 21, :meta {:file "/Users/matthew/clojure/whamtet-cv/out/cljs_pdfkit/optimize_dom.cljc", :line 79, :column 6, :end-line 79, :end-column 21}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:fill-color :align :indent :line-join :line-break :font-size :fill-and-stroke :scale :stroke-color :linear-gradient :default :columns :stroke-opacity :fill :ellipsis :width :radial-gradient :character-spacing :word-spacing :underline :font :column-gap :style :strike :miter-limit :link :line-width :opacity :translate :rotate :line-cap :fill-opacity :paragraph-gap :height :continued}, :order [:default :style :align :indent :line-break :fill-and-stroke :linear-gradient :columns :fill :ellipsis :width :radial-gradient :character-spacing :word-spacing :underline :column-gap :strike :link :paragraph-gap :height :continued :scale :translate :rotate :fill-color :line-join :stroke-color :stroke-opacity :miter-limit :line-width :opacity :line-cap :fill-opacity :font-size :font]}, :doc nil}