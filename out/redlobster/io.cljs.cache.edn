;; Analyzed by ClojureScript 1.7.170
{:use-macros {let-realised redlobster.macros, waitp redlobster.macros}, :excludes #{}, :name redlobster.io, :imports nil, :requires {p redlobster.promise, redlobster.promise redlobster.promise, s redlobster.stream, redlobster.stream redlobster.stream, http redlobster.http, redlobster.http redlobster.http, cljs.node cljs.node}, :uses {log cljs.node}, :defs {slurp {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 35, :column 7, :end-line 35, :end-column 12, :arglists (quote ([path]))}, :name redlobster.io/slurp, :variadic false, :file "out/redlobster/io.cljs", :end-column 12, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, spit {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 71, :column 7, :end-line 71, :end-column 11, :arglists (quote ([path data]))}, :name redlobster.io/spit, :variadic false, :file "out/redlobster/io.cljs", :end-column 11, :method-params ([path data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path data]))}, file-url? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 18, :column 7, :end-line 18, :end-column 16, :arglists (quote ([path]))}, :name redlobster.io/file-url?, :variadic false, :file "out/redlobster/io.cljs", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, binary-slurp-file {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 45, :column 8, :end-line 45, :end-column 25, :private true, :arglists (quote ([path]))}, :private true, :name redlobster.io/binary-slurp-file, :variadic false, :file "out/redlobster/io.cljs", :end-column 25, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, spit-http {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 59, :column 8, :end-line 59, :end-column 17, :private true, :arglists (quote ([path data]))}, :private true, :name redlobster.io/spit-http, :variadic false, :file "out/redlobster/io.cljs", :end-column 17, :method-params ([path data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path data]))}, parse-url {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 12, :column 7, :end-line 12, :end-column 16, :arglists (quote ([path]))}, :name redlobster.io/parse-url, :variadic false, :file "out/redlobster/io.cljs", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, http-success? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 54, :column 8, :end-line 54, :end-column 21, :private true, :arglists (quote ([res]))}, :private true, :name redlobster.io/http-success?, :variadic false, :file "out/redlobster/io.cljs", :end-column 21, :method-params ([res]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([res]))}, binary-slurp-http {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 41, :column 8, :end-line 41, :end-column 25, :private true, :arglists (quote ([path]))}, :private true, :name redlobster.io/binary-slurp-http, :variadic false, :file "out/redlobster/io.cljs", :end-column 25, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, slurp-http {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 27, :column 8, :end-line 27, :end-column 18, :private true, :arglists (quote ([path]))}, :private true, :name redlobster.io/slurp-http, :variadic false, :file "out/redlobster/io.cljs", :end-column 18, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, spit-file {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 68, :column 8, :end-line 68, :end-column 17, :private true, :arglists (quote ([path data]))}, :private true, :name redlobster.io/spit-file, :variadic false, :file "out/redlobster/io.cljs", :end-column 17, :method-params ([path data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path data]))}, http-url? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 15, :column 7, :end-line 15, :end-column 16, :arglists (quote ([path]))}, :name redlobster.io/http-url?, :variadic false, :file "out/redlobster/io.cljs", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, binary-slurp {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 48, :column 7, :end-line 48, :end-column 19, :arglists (quote ([path]))}, :name redlobster.io/binary-slurp, :variadic false, :file "out/redlobster/io.cljs", :end-column 19, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, url {:name redlobster.io/url, :file "out/redlobster/io.cljs", :line 10, :column 1, :end-line 10, :end-column 21, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 10, :column 18, :end-line 10, :end-column 21}}, slurp-file {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/io.cljs", :line 32, :column 8, :end-line 32, :end-column 18, :private true, :arglists (quote ([path]))}, :private true, :name redlobster.io/slurp-file, :variadic false, :file "out/redlobster/io.cljs", :end-column 18, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}}, :require-macros {n cljs.node-macros, cljs.node-macros cljs.node-macros, redlobster.macros redlobster.macros}, :cljs.analyzer/constants {:seen #{:redlobster.io/unknown-path :else :redlobster.http/status-code}, :order [:else :redlobster.io/unknown-path :redlobster.http/status-code]}, :doc nil}