;; Analyzed by ClojureScript 1.7.170
{:use-macros {when-realised redlobster.macros, promise redlobster.macros}, :excludes #{}, :name redlobster.stream, :imports nil, :requires {p redlobster.promise, redlobster.promise redlobster.promise, e redlobster.events, redlobster.events redlobster.events, cljs.node cljs.node}, :uses {log cljs.node}, :defs {destroy-soon {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 27, :column 4, :end-line 27, :end-column 16, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/destroy-soon, :variadic false, :file "out/redlobster/stream.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, end {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 26, :column 4, :end-line 26, :end-column 7, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this data encoding]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/end, :variadic false, :file "out/redlobster/stream.cljs", :end-column 7, :method-params ([this data encoding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this data encoding])), :doc nil}, resume {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 18, :column 4, :end-line 18, :end-column 10, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/resume, :variadic false, :file "out/redlobster/stream.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, stream? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 29, :column 7, :end-line 29, :end-column 14, :arglists (quote ([v]))}, :name redlobster.stream/stream?, :variadic false, :file "out/redlobster/stream.cljs", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, append-data {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 55, :column 8, :end-line 55, :end-column 19, :private true, :arglists (quote ([current data encoding]))}, :private true, :name redlobster.stream/append-data, :variadic false, :file "out/redlobster/stream.cljs", :end-column 19, :method-params ([current data encoding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 3, :fn-var true, :arglists (quote ([current data encoding]))}, read-binary-stream {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 71, :column 7, :end-line 71, :end-column 25, :arglists (quote ([stream]))}, :name redlobster.stream/read-binary-stream, :variadic false, :file "out/redlobster/stream.cljs", :end-column 25, :method-params ([stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stream]))}, writable? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 15, :column 4, :end-line 15, :end-column 13, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/writable?, :variadic false, :file "out/redlobster/stream.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, set-encoding {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 16, :column 4, :end-line 16, :end-column 16, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this encoding]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/set-encoding, :variadic false, :file "out/redlobster/stream.cljs", :end-column 16, :method-params ([this encoding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this encoding])), :doc nil}, write-file {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 52, :column 7, :end-line 52, :end-column 17, :arglists (quote ([path]))}, :name redlobster.stream/write-file, :variadic false, :file "out/redlobster/stream.cljs", :end-column 17, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, write-stream {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 80, :column 7, :end-line 80, :end-column 19, :arglists (quote ([stream data & [encoding]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(stream data [encoding])], :arglists ([stream data & [encoding]]), :arglists-meta (nil)}}, :name redlobster.stream/write-stream, :variadic true, :file "out/redlobster/stream.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(stream data [encoding])], :arglists ([stream data & [encoding]]), :arglists-meta (nil)}, :method-params [(stream data [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists ([stream data & [encoding]])}, pipe {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 21, :column 4, :end-line 21, :end-column 8, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this destination options]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/pipe, :variadic false, :file "out/redlobster/stream.cljs", :end-column 8, :method-params ([this destination options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this destination options])), :doc nil}, destroy {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 19, :column 4, :end-line 19, :end-column 11, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/destroy, :variadic false, :file "out/redlobster/stream.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, createReadStream {:name redlobster.stream/createReadStream, :file "out/redlobster/stream.cljs", :line 10, :column 3, :end-line 10, :end-column 36, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 10, :column 20, :end-line 10, :end-column 36}}, createWriteStream {:name redlobster.stream/createWriteStream, :file "out/redlobster/stream.cljs", :line 10, :column 3, :end-line 10, :end-column 54, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 10, :column 37, :end-line 10, :end-column 54}}, IStream {:meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 13, :column 14, :end-line 13, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {destroy-soon [[this]], end [[this data encoding]], resume [[this]], writable? [[this]], set-encoding [[this encoding]], pipe [[this destination options]], destroy [[this]], write [[this data encoding]], readable? [[this]], pause [[this]]}}}, :protocol-symbol true, :name redlobster.stream/IStream, :file "out/redlobster/stream.cljs", :end-column 21, :column 1, :line 13, :protocol-info {:methods {destroy-soon [[this]], end [[this data encoding]], resume [[this]], writable? [[this]], set-encoding [[this encoding]], pipe [[this destination options]], destroy [[this]], write [[this data encoding]], readable? [[this]], pause [[this]]}}, :info nil, :end-line 13, :impls #{redlobster.stream/Stream}, :doc nil, :jsdoc ("@interface")}, write {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 23, :column 4, :end-line 23, :end-column 9, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this data encoding]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/write, :variadic false, :file "out/redlobster/stream.cljs", :end-column 9, :method-params ([this data encoding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this data encoding])), :doc nil}, read-stream {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 61, :column 7, :end-line 61, :end-column 18, :arglists (quote ([stream & [encoding]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(stream [encoding])], :arglists ([stream & [encoding]]), :arglists-meta (nil)}}, :name redlobster.stream/read-stream, :variadic true, :file "out/redlobster/stream.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(stream [encoding])], :arglists ([stream & [encoding]]), :arglists-meta (nil)}, :method-params [(stream [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists ([stream & [encoding]])}, readable? {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 14, :column 4, :end-line 14, :end-column 13, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/readable?, :variadic false, :file "out/redlobster/stream.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, Stream {:name redlobster.stream/Stream, :file "out/redlobster/stream.cljs", :line 8, :column 1, :end-line 8, :end-column 27, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 8, :column 21, :end-line 8, :end-column 27}}, read-file {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 49, :column 7, :end-line 49, :end-column 16, :arglists (quote ([path]))}, :name redlobster.stream/read-file, :variadic false, :file "out/redlobster/stream.cljs", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, pause {:protocol-inline nil, :meta {:file "/Users/matthewmolloy/clojure/cv/out/redlobster/stream.cljs", :line 17, :column 4, :end-line 17, :end-column 9, :protocol redlobster.stream/IStream, :doc nil, :arglists (quote ([this]))}, :protocol redlobster.stream/IStream, :name redlobster.stream/pause, :variadic false, :file "out/redlobster/stream.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}}, :require-macros {n cljs.node-macros, cljs.node-macros cljs.node-macros, redlobster.macros redlobster.macros}, :cljs.analyzer/constants {:seen #{:else :close :error :redlobster.stream/unknown-datatype :end :data}, :order [:error :data :end :close :else :redlobster.stream/unknown-datatype]}, :doc nil}