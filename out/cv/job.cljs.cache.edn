;; Analyzed by ClojureScript 1.7.170
{:use-macros {let-realised redlobster.macros}, :excludes #{}, :name cv.job, :imports nil, :requires {redlobster.io redlobster.io, redlobster.promise redlobster.promise, cljs cljs.js, cljs-pdfkit.core cljs-pdfkit.core, cljs.tools.reader cljs.tools.reader, tags cljs.tagged-literals, r cljs.tools.reader, cljs.js cljs.js, walk clojure.walk, cljs.tagged-literals cljs.tagged-literals, cljs-pdfkit cljs-pdfkit.core, string clojure.string, clojure.string clojure.string, clojure.walk clojure.walk}, :uses {slurp redlobster.io, read-string cljs.tools.reader}, :defs {my-walk {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/src/cv/job.cljs", :line 16, :column 7, :end-line 16, :end-column 14, :arglists (quote ([s]))}, :name cv.job/my-walk, :variadic false, :file "src/cv/job.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, data {:name cv.job/data, :file "src/cv/job.cljs", :line 21, :column 1, :end-line 21, :end-column 10, :meta {:file "/Users/matthew/clojure/whamtet-cv/src/cv/job.cljs", :line 21, :column 6, :end-line 21, :end-column 10}}, st {:name cv.job/st, :file "src/cv/job.cljs", :line 25, :column 1, :end-line 25, :end-column 8, :meta {:file "/Users/matthew/clojure/whamtet-cv/src/cv/job.cljs", :line 25, :column 6, :end-line 25, :end-column 8}}, jobs {:name cv.job/jobs, :file "src/cv/job.cljs", :line 26, :column 1, :end-line 26, :end-column 10, :meta {:file "/Users/matthew/clojure/whamtet-cv/src/cv/job.cljs", :line 26, :column 6, :end-line 26, :end-column 10}}, set-jobs! {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/src/cv/job.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([new-jobs]))}, :name cv.job/set-jobs!, :variadic false, :file "src/cv/job.cljs", :end-column 16, :method-params ([new-jobs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-jobs]))}, my-eval {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/src/cv/job.cljs", :line 31, :column 7, :end-line 31, :end-column 14, :arglists (quote ([{:keys [source]}]))}, :name cv.job/my-eval, :variadic false, :file "src/cv/job.cljs", :end-column 14, :method-params ([p__8204]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [source]}]))}, read-cljs {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/src/cv/job.cljs", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([s]))}, :name cv.job/read-cljs, :variadic false, :file "src/cv/job.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, add-job {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/src/cv/job.cljs", :line 40, :column 7, :end-line 40, :end-column 14, :arglists (quote ([s]))}, :name cv.job/add-job, :variadic false, :file "src/cv/job.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, get-job {:protocol-inline nil, :meta {:file "/Users/matthew/clojure/whamtet-cv/src/cv/job.cljs", :line 54, :column 7, :end-line 54, :end-column 14, :arglists (quote ([s]))}, :name cv.job/get-job, :variadic false, :file "src/cv/job.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}}, :require-macros {redlobster.macros redlobster.macros, cljs cljs.js, cljs.js cljs.js, cljs-pdfkit cljs-pdfkit.core, cljs-pdfkit.core cljs-pdfkit.core}, :cljs.analyzer/constants {:seen #{data :ns cljs.core let :source :jobs :eval}, :order [:jobs :source let data :eval :ns cljs.core]}, :doc nil}